>>> from books_authors_app.models import * 
>>> Book.objects.create(title='C sharp',desc='Let's make a TVgame')
  File "<console>", line 1
    Book.objects.create(title='C sharp',desc='Let's make a TVgame')
                                                  ^
SyntaxError: invalid syntax
>>> Book.objects.create(title='C sharp',desc="Let's make a TVgame")
<Book: Book object (1)>
>>> Book.objects.create(title='Java',desc="Anyway,let's do this!")
<Book: Book object (2)>
>>> Book.objects.create(title='Python',desc="Do you like math? No,I don't")
<Book: Book object (3)>
>>> Book.objects.create(title='PHP',desc="Do you like HTML?")
<Book: Book object (4)>
>>> Book.objects.create(title='Ruby',desc="Web fundamental is very hard")
<Book: Book object (5)>
>>> Book.objects.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>]>
>>> Author.objects.create(first_name="Sota",last_name="Yoshihiro")
<Author: Author object (1)>
>>> Author.objects.create(first_name="Hikaru",last_name="Morikawa")
<Author: Author object (2)>
>>> Author.objects.create(first_name="Yuto",last_name="Kobayashi")
<Author: Author object (3)>
>>> Author.objects.create(first_name="Aren",last_name="Eto")
<Author: Author object (4)>
>>> Author.objects.create(first_name="Tamaki",last_name="Kato")
<Author: Author object (5)>
>>> Author.objects.all()
<QuerySet [<Author: Author object (1)>, <Author: Author object (2)>, <Author: Author object (3)>, <Author: Author object (4)>, <Author: Author object (5)>]>
>>> 
now exiting InteractiveConsole...
USERnoMacBook-Air:book_authors_proj sotayoshihiro$ python manage.py makemigrations
You are trying to add a non-nullable field 'notes' to author without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 2
USERnoMacBook-Air:book_authors_proj sotayoshihiro$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, books_authors_app, contenttypes, sessions
Running migrations:
  No migrations to apply.
  Your models have changes that are not yet reflected in a migration, and so won't be applied.
  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them.
USERnoMacBook-Air:book_authors_proj sotayoshihiro$ python manage.py makemigrations
You are trying to add a non-nullable field 'notes' to author without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> ""
Migrations for 'books_authors_app':
  books_authors_app/migrations/0003_author_notes.py
    - Add field notes to author
USERnoMacBook-Air:book_authors_proj sotayoshihiro$ python manage.py makemigrations
No changes detected
USERnoMacBook-Air:book_authors_proj sotayoshihiro$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, books_authors_app, contenttypes, sessions
Running migrations:
  Applying books_authors_app.0003_author_notes... OK
USERnoMacBook-Air:book_authors_proj sotayoshihiro$ python manage.py shell
Python 3.8.0 (default, Oct 24 2019, 14:58:20) 
[Clang 10.0.1 (clang-1001.0.46.4)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> Author.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Author' is not defined
>>> Book.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Book' is not defined
>>> from books_authors_app.models import *
>>> Author.objects.all()
<QuerySet [<Author: Author object (1)>, <Author: Author object (2)>, <Author: Author object (3)>, <Author: Author object (4)>, <Author: Author object (5)>]>
>>> Book.objects.all().__dict__
{'model': <class 'books_authors_app.models.Book'>, '_db': None, '_hints': {}, 'query': <django.db.models.sql.query.Query object at 0x108f92df0>, '_result_cache': None, '_sticky_filter': False, '_for_write': False, '_prefetch_related_lookups': (), '_prefetch_done': False, '_known_related_objects': {}, '_iterable_class': <class 'django.db.models.query.ModelIterable'>, '_fields': None}
>>> Book.objects.get(id=1).title="C#"
>>> Book.objects.get(id=1).save()
>>> Book.objects.get(id=1)
<Book: Book object (1)>
>>> Book.objects.filter(id=1)
<QuerySet [<Book: Book object (1)>]>
>>> Book.objects.all().values()
<QuerySet [{'id': 1, 'title': 'C sharp', 'desc': "Let's make a TVgame", 'created_at': datetime.datetime(2019, 12, 8, 6, 6, 4, 642305, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 34, 6, 622820, tzinfo=<UTC>)}, {'id': 2, 'title': 'Java', 'desc': "Anyway,let's do this!", 'created_at': datetime.datetime(2019, 12, 8, 6, 6, 58, 707647, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 6, 58, 707702, tzinfo=<UTC>)}, {'id': 3, 'title': 'Python', 'desc': "Do you like math? No,I don't", 'created_at': datetime.datetime(2019, 12, 8, 6, 7, 50, 64589, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 7, 50, 64662, tzinfo=<UTC>)}, {'id': 4, 'title': 'PHP', 'desc': 'Do you like HTML?', 'created_at': datetime.datetime(2019, 12, 8, 6, 10, 30, 43782, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 10, 30, 43875, tzinfo=<UTC>)}, {'id': 5, 'title': 'Ruby', 'desc': 'Web fundamental is very hard', 'created_at': datetime.datetime(2019, 12, 8, 6, 11, 17, 62845, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 11, 17, 62897, tzinfo=<UTC>)}]>
>>> c=Book.objects.get(id=1)
>>> c.title="C#"
>>> c.save()
>>> Book.objects.all().values()
<QuerySet [{'id': 1, 'title': 'C#', 'desc': "Let's make a TVgame", 'created_at': datetime.datetime(2019, 12, 8, 6, 6, 4, 642305, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 37, 14, 163733, tzinfo=<UTC>)}, {'id': 2, 'title': 'Java', 'desc': "Anyway,let's do this!", 'created_at': datetime.datetime(2019, 12, 8, 6, 6, 58, 707647, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 6, 58, 707702, tzinfo=<UTC>)}, {'id': 3, 'title': 'Python', 'desc': "Do you like math? No,I don't", 'created_at': datetime.datetime(2019, 12, 8, 6, 7, 50, 64589, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 7, 50, 64662, tzinfo=<UTC>)}, {'id': 4, 'title': 'PHP', 'desc': 'Do you like HTML?', 'created_at': datetime.datetime(2019, 12, 8, 6, 10, 30, 43782, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 10, 30, 43875, tzinfo=<UTC>)}, {'id': 5, 'title': 'Ruby', 'desc': 'Web fundamental is very hard', 'created_at': datetime.datetime(2019, 12, 8, 6, 11, 17, 62845, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 11, 17, 62897, tzinfo=<UTC>)}]>
>>> d=Author.objects.get(id=4)
>>> d.first_name="Bill"
>>> d.save()
>>> d=Author.objects.all().value()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'value'
>>> d=Author.objects.all().values()
>>> d
<QuerySet [{'id': 1, 'first_name': 'Sota', 'last_name': 'Yoshihiro', 'notes': '', 'created_at': datetime.datetime(2019, 12, 8, 6, 13, 26, 807639, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 13, 26, 807697, tzinfo=<UTC>)}, {'id': 2, 'first_name': 'Hikaru', 'last_name': 'Morikawa', 'notes': '', 'created_at': datetime.datetime(2019, 12, 8, 6, 13, 49, 200036, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 13, 49, 200093, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'Yuto', 'last_name': 'Kobayashi', 'notes': '', 'created_at': datetime.datetime(2019, 12, 8, 6, 14, 9, 216211, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 14, 9, 216266, tzinfo=<UTC>)}, {'id': 4, 'first_name': 'Bill', 'last_name': 'Eto', 'notes': '', 'created_at': datetime.datetime(2019, 12, 8, 6, 14, 26, 735208, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 16, 25, 50, 195928, tzinfo=<UTC>)}, {'id': 5, 'first_name': 'Tamaki', 'last_name': 'Kato', 'notes': '', 'created_at': datetime.datetime(2019, 12, 8, 6, 14, 44, 65466, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 12, 8, 6, 14, 44, 65523, tzinfo=<UTC>)}]>
>>> print(8)
8
>>> for book in Book:
... print(book)
  File "<console>", line 2
    print(book)
    ^
IndentationError: expected an indented block
>>> Book.objects.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>]>
>>> print(list(Book.objects.all()))
[<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>]
>>> all=Book.objects.all()
>>> all
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>]>
>>> for i in range(1,4):
...     this_author=Author.objects.get(id=i)
...     this_book=Book.objects.get(id=i)
...     for e in range(1,i+1):
...             this_author.books.add(this_book)
... print(Author.books)
  File "<console>", line 6
    print(Author.books)
    ^
SyntaxError: invalid syntax
>>> for i in range(1,4):
... ...     this_author=Author.objects.get(id=i)
  File "<console>", line 2
    ...     this_author=Author.objects.get(id=i)
    ^
IndentationError: expected an indented block
>>> ...     this_book=Book.objects.get(id=i)
  File "<console>", line 1
    ...     this_book=Book.objects.get(id=i)
            ^
SyntaxError: invalid syntax
>>> ...     for e in range(1,i+1):
  File "<console>", line 1
    ...     for e in range(1,i+1):
            ^
SyntaxError: invalid syntax
>>> ...             this_author.books.add(this_book)
  File "<console>", line 1
    ...             this_author.books.add(this_book)
                    ^
SyntaxError: invalid syntax
>>> for i in range(1,4):
... print(i)
  File "<console>", line 2
    print(i)
    ^
IndentationError: expected an indented block
>>> for i in range(1,4):
...     print(i)
... /Users/sotayoshihiro/.pyenv/versions/3.8.0/bin/python /Users/sotayoshihiro/Documents/codingDOJO_python_stack/django/django_intro/book_authors_proj/books_authors_app/models.py
  File "<console>", line 3
    /Users/sotayoshihiro/.pyenv/versions/3.8.0/bin/python /Users/sotayoshihiro/Documents/codingDOJO_python_stack/django/django_intro/book_authors_proj/books_authors_app/models.py
    ^
SyntaxError: invalid syntax
>>> for i in range(1,4):
...     this_author=Author.objects.get(id=i)
...     this_book=Book.objects.get(id=i)
... ...     for e in range(1,i+1):
  File "<console>", line 4
    ...     for e in range(1,i+1):
    ^
SyntaxError: invalid syntax
>>> this_book
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'this_book' is not defined
>>> for i in range(1,4):
...     this_author=Author.objects.get(id=i)
...     this_book=Book.objects.get(id=i)
... ...     for e in range(1,i+1):
  File "<console>", line 4
    ...     for e in range(1,i+1):
    ^
SyntaxError: invalid syntax
>>> for i in range(1,4):
...     this_author=Author.objects.get(id=i)
...     this_book=Book.objects.get(id=i)
...             for i in range(1,i+1):
  File "<console>", line 4
    for i in range(1,i+1):
    ^
IndentationError: unexpected indent
>>> for i in range(1,4):
...     this_author=Author.objects.get(id=i)
...     this_book=Book.objects.get(id=i)
...         for i in range(1,i+1):
  File "<console>", line 4
    for i in range(1,i+1):
                         ^
TabError: inconsistent use of tabs and spaces in indentation
>>> for i in range(1,4):
...     print(i)
... 
1
2
3
>>> for i in range(1,4):
...     this_author=Author.objects.get(id=i)
...     this_book=Book.objects.get(id=i)
... 
>>> 
>>> 
>>> for i in range(1,5):
...     this_author=Author.objects.get(id=i)
...     this_book=Book.objects.get(id=i)
...         for i in range(1,i+2):
  File "<console>", line 4
    for i in range(1,i+2):
    ^
IndentationError: unexpected indent
>>> for i in range(1,5):
...     this_author=Author.objects.get(id=i)
...     this_book=Book.objects.get(id=i)
...     for e in range(1,i+2):
...         this_author.books.a
... 
Traceback (most recent call last):
  File "<console>", line 5, in <module>
AttributeError: 'ManyRelatedManager' object has no attribute 'a'
>>> for i in range(1,5):
...     this_author=Author.objects.get(id=i)
...     for e in range(1,i+2):
...         this_book=Book.objects.get(id=e)
...         this_author.books.add(this_book)
... 
>>> this_book3=Book.objects.get(id=3)
>>> this_book3.Authors.all()
<QuerySet [<Author: Author object (2)>, <Author: Author object (3)>, <Author: Author object (4)>]>
>>> a=this_book3.Authors.all()
>>> this_book3.Authors.remove(a)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/fields/related_descriptors.py", line 977, in remove
    self._remove_items(self.source_field_name, self.target_field_name, *objs)
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/fields/related_descriptors.py", line 1155, in _remove_items
    self.through._default_manager.using(db).filter(filters).delete()
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/query.py", line 892, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/query.py", line 910, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/sql/query.py", line 1290, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/sql/query.py", line 1310, in _add_q
    child_clause, needed_inner = self._add_q(
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/sql/query.py", line 1315, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/sql/query.py", line 1251, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/sql/query.py", line 1116, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/lookups.py", line 20, in __init__
    self.rhs = self.get_prep_lookup()
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/fields/related_lookups.py", line 59, in get_prep_lookup
    self.rhs = [target_field.get_prep_value(v) for v in self.rhs]
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/fields/related_lookups.py", line 59, in <listcomp>
    self.rhs = [target_field.get_prep_value(v) for v in self.rhs]
  File "/Users/sotayoshihiro/.pyenv/versions/3.8.0/lib/python3.8/site-packages/django/db/models/fields/__init__.py", line 966, in get_prep_value
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a number, not 'QuerySet'
>>> this_book3.Authors.remove(this_author=this_author.Authors.all())
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'Authors'
>>> for i in range(2,5)
  File "<console>", line 1
    for i in range(2,5)
                      ^
SyntaxError: invalid syntax
>>> this_book=Book.objects.get(id=3)
>>> this_book
<Book: Book object (3)>
>>> this_book.Authors
<django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager object at 0x1090154c0>
>>> this_author=Author.objects.get(id=1)
>>> this_author
<Author: Author object (1)>
>>> Author.objects.all()
<QuerySet [<Author: Author object (1)>, <Author: Author object (2)>, <Author: Author object (3)>, <Author: Author object (4)>, <Author: Author object (5)>]>
>>> for i in range(1,6):
...     this_book=Book.objects(id=3)
...     this_author=Author.objects(id=i)
... 
Traceback (most recent call last):
  File "<console>", line 2, in <module>
TypeError: 'Manager' object is not callable
>>> for i in range(1,6):
...     this_author=Author.objects.get(id=i)
...     this_book=Book.objects.get(id=3)
...     this_book.Authors.remove(this_author)
... 
>>> first_author=Author.objects.get(id=1)
>>> third_book=Book.objects.get(id=3)
>>> third_book.Authors.remove(first_author)
>>> Author.objects.create(first_name="john",last_name="iuchi",notes="yeah")
<Author: Author object (6)>
>>> Author.objects.all()
<QuerySet [<Author: Author object (1)>, <Author: Author object (2)>, <Author: Author object (3)>, <Author: Author object (4)>, <Author: Author object (5)>, <Author: Author object (6)>]>
>>> a=Author.objects.get(id=5)
>>> boook2=Book.objects.get(id=2)
>>> a.books.add(boook2)
>>> author3=Author.objects.get(id=3)
>>> author3.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (4)>]>
>>> book5=Book.objects.get(id=5)
>>> book5.Authors.all()
<QuerySet [<Author: Author object (4)>]>
>>> 